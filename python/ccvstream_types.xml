<?xml version="1.0" encoding="utf-8"?>
<!--
(c) 2021 Copyright, Real-Time Innovations, Inc.  All rights reserved.
RTI grants Licensee a license to use, modify, compile, and create derivative
works of the Software.  Licensee has the right to distribute object form only
for use with RTI products.  The Software is provided "as is", with no warranty
of any type, including any warranty for fitness for any purpose. RTI is under
no obligation to maintain or support the Software.  RTI shall not be liable for
any incidental or consequential damages arising out of the use or inability to
use the software.
-->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="http://community.rti.com/schema/6.0.0/rti_dds_profiles.xsd" version="6.0.0">

  <!-- Qos Library -->
  <qos_library name="QosLibrary">
    <qos_profile name="DefaultProfile" base_name="BuiltinQosLibExp::Generic.BestEffort" is_default_qos="true">
      <participant_qos>
        <transport_builtin>
          <mask>UDPV4 | SHMEM</mask>
        </transport_builtin>
      </participant_qos>
    </qos_profile>
  </qos_library>

  <!-- types -->
  <types>
    <module name="cctypes">
      <const name="MAX_SEQUENCE_LEN" type="uint32" value="18800"/>
      <const name="KEY_STRING_LEN" type="uint8" value="8"/>
      <enum name="payloadTypesEnum">
        <enumerator name="NO_PAYLOAD" value="0"/>
        <enumerator name="STREAM_FFMPEG_0"/>
        <enumerator name="MAX_PAYLOAD_ENUM"/>
      </enum>
      <struct name= "ccBulk">
        <member name="pub_id" stringMaxLength="cctypes::KEY_STRING_LEN" type="string" key="true"/>
        <member name="content_type" type="nonBasic"  nonBasicTypeName= "cctypes::payloadTypesEnum"/>
        <member name="tstamp_first_frame" type="uint64"/>
        <member name="data" sequenceMaxLength="cctypes::MAX_SEQUENCE_LEN" type="byte"/>
      </struct>
      <struct name= "ccPerf">
        <member name="tStart" type="uint64"/>
        <member name="tDuration" type="uint64"/>
        <member name="data_count" type="uint64"/>
        <member name="packets_per_sample" type="uint32"/>
        <member name="samples_count" type="uint32"/>
        <member name="samples_dropped" type="uint32"/>
        <member name="latency_min" sequenceMaxLength="3" type="int64"/>
        <member name="latency_mean" sequenceMaxLength="3" type="int64"/>
        <member name="latency_max" sequenceMaxLength="3" type="int64"/>
        <member name="latency_stddev" sequenceMaxLength="3" type="uint64"/>
        <member name="timestamps_last" sequenceMaxLength="4" type="uint64"/>
      </struct>
      <struct name= "ccControl">
        <member name="content_type" type="nonBasic"  nonBasicTypeName= "cctypes::payloadTypesEnum"/>
        <member name="packets_per_sample" type="uint32"/>
      </struct>
    </module>
  </types>


  <!-- Domain Library -->
  <domain_library name="MyDomainLibrary">
    <domain name="MyDomain" domain_id="0">
      <!-- Register the data types and topic names here -->
      <!-- performance monitoring from the video subscriber -->
      <register_type name="cctypes::ccPerf" type_ref="cctypes::ccPerf"/>
      <topic name="mBeT/QEYY" register_type_ref="cctypes::ccPerf"/>
      <!-- publisher control to the video publisher -->
      <register_type name="cctypes::ccControl" type_ref="cctypes::ccControl"/>
      <topic name="cBeTvilc2" register_type_ref="cctypes::ccControl"/>
    </domain>
  </domain_library>

  <!-- Participant library -->
  <domain_participant_library name="MyParticipantLibrary">
    <domain_participant name="VidMonCtl" domain_ref="MyDomainLibrary::MyDomain">

      <publisher name="vidControlPub">
        <data_writer name="vidControlWriter" topic_ref="cBeTvilc2" />
      </publisher>

      <subscriber name="vidPerfSub">
        <data_reader name="vidPerfReader" topic_ref="mBeT/QEYY" />
      </subscriber>

    </domain_participant>
  </domain_participant_library>
</dds>
